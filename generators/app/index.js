'use strict';

var generators = require('yeoman-generator');
var chalk = require('chalk');
var yoSay = require('yosay');
var mkdirp = require('mkdirp');
let utils = require('../../utils/all');
let prompts = require('./prompts');
let path = require('path');
let fs = require('fs');
const packageInfo = require('../../package.json');

// Set the base root directory for our files
let baseRootPath = path.dirname(require.resolve('react-webpack-template'));
let appFolder = '';

//noinspection JSUnusedGlobalSymbols
module.exports = generators.Base.extend({
  // The name `constructor` is important here
  constructor: function () {

    console.log('Generator Constructor');
    // Calling the super constructor is important so our generator is correctly set up
    generators.Base.apply(this, arguments);

    // Next, add your custom code
    this.option('coffee'); // This method adds support for a `--coffee` flag

    // Make options available
    this.option('skip-welcome-message', {
      desc: 'Skip the welcome message',
      type: Boolean,
      defaults: false
    });
    this.option('skip-install');

    // Use our plain template as source
    // this.sourceRoot(baseRootPath);

  },

  initializing: function () {
    if (!this.options['skip-welcome-message']) {
      // Have Yeoman greet the user.
      this.log(yoSay(
        'Welcome to the great ' + chalk.red('generator-washemo-20') + ' generator!'
      ));
      this.log('Out of the box I include Webpack and some default React components.\n');
    }
  },

  prompting: function () {

    var prompts = [{
      type: 'input',
      name: 'appName',
      message: 'Please choose your application name',
      default: utils.yeoman.getAppName()
    }];

    return this.prompt(prompts).then(function (props) {
      // To access props later use this.props.someAnswer;
      this.props = props;

      // Make sure to get the correct app name if it is not the default
      if (props.appName !== utils.yeoman.getAppName()) {
        props.appName = utils.yeoman.getAppName(props.appName);
      }

      this.log('name ', props.appName);

      // Set needed global vars for yo
      this.appName = props.appName;
      this.style = props.style;
      this.postcss = props.postcss;
      this.generatedWithVersion = packageInfo.version.split('.').unshift();

      // Set needed keys into config
      this.config.set('appName', this.appName);
      this.config.set('appPath', this.appPath);
      this.config.set('style', this.style);
      this.config.set('postcss', this.postcss);
      this.config.set('generatedWithVersion', this.generatedWithVersion);

      this.config.save();

    }.bind(this));
  },

  configuring: function () {

    this.log('creating folder structure at ', this.appName);

    mkdirp.sync(this.appName);

    appFolder = path.join(process.cwd(), this.appName);

    // Generate our package.json. Make sure to also include the required dependencies for styles
    let defaultSettings = this.fs.readJSON(path.join(baseRootPath, 'package.json'));
    let packageSettings = {
      name: this.appName,
      private: true,
      version: '0.0.1',
      description: 'YOUR DESCRIPTION - Generated by generator-washemo-20',
      main: '',
      scripts: defaultSettings.scripts,
      repository: '',
      keywords: [],
      author: 'Your name here',
      devDependencies: defaultSettings.devDependencies,
      dependencies: defaultSettings.dependencies
    };

    this.fs.writeJSON(this.destinationPath(appFolder + '/package.json'), packageSettings);
  },

  writing: function () {
    //Copy the configuration files
    // this.fs.copyTpl(
    //   this.templatePath('_package.json'),
    //   this.destinationPath('package.json'), {
    //     name: this.props.name
    //   }
    // );

    //Copy application files

    //Install Dependencies

  },

  install: function () {
    if (!this.options['skip-install']) {
      this.installDependencies();
    }
  }
});
